/**
 * This module contains scanner for generating tokens from file
 * which is generated by --lex option
 *
 * @author Devansh Mehta devansh.mht@gmail.com
 */

//Required for using let keyword in nodes
"use strict"

var TokensWithValue = {
    INTEGER     : 0,
    STRING      : 1,
    IDENTIFIER  : 2,
    TYPE        : 3
};

var LexScannerStates = {
    LINE_NUMBER : 0,
    TOKEN_TYPE  : 1, 
    TOKEN_VALUE : 2
};

//yylval is the semantic value of the token.
//yytext is the text matching the input. For input
//yylloc - for location
//an object with lex and setInput function will do for custom scanner

/**
 * Constructor for cool lexical scanner for the file generated by 
 * --lex option
 */
function CoolLexScanner() {
    let text = "";
    let currentState = LexScannerStates.LINE_NUMBER;
    let currentTokenType = "";
    this.yytext = "";
    this.yylloc = {
	first_column: 0,
	first_line: 1,
	last_line: 1,
	last_column: 0
    };

    this.setInput = function(text_) {
	text += text_;
    }

    this.lex = function() {
	/*
	if (text === "") {
	    return "EOF";
	}
	*/
	console.log('CURRENTSTATE: ' + currentState);
	if (currentState === LexScannerStates.LINE_NUMBER) {
	    let line = this.getNextLine();	
	    if (line === "") return 1;
	    line = line.trim();
	    let lineNumber = parseInt(line);
	    this.yylloc.first_line = lineNumber;
	    this.yylloc.last_line = lineNumber;
	    currentState = LexScannerStates.TOKEN_TYPE;
        console.log('LINE NUMBER: ' + lineNumber);
	    return this.lex();
	} else if (currentState === LexScannerStates.TOKEN_TYPE) {
	    let token = this.getNextLine();
	    if (token === "") return 1;
	    token = token.trim();
	    currentTokenType = token.toUpperCase();
	    console.log('TOKENTYPE: ' + currentTokenType);
	    if (TokensWithValue[currentTokenType] === undefined) {
		currentState = LexScannerStates.LINE_NUMBER;
		return currentTokenType;
	    } else {
	        currentState = LexScannerStates.TOKEN_VALUE;
	        return this.lex();
	    }
	} else if (currentState === LexScannerStates.TOKEN_VALUE) {
	    if (currentTokenType != "") {
		let value = this.getNextLine();
		if (value === "") {
		    return 1;
		} else { 
		    value = value.trim();
		    console.log('VALUE: ' + value);		
		    this.yytext = value;
		}
	    } else {
		this.yytext = "";
	    }
	    currentState = LexScannerStates.LINE_NUMBER;
	    console.log('TOKEN: ' + currentTokenType);
	    return currentTokenType;
	} else { 
	    //throw some kind of exception
	    return "INVALID";
	}
    }

    //Returns empty if there are no more newlines 
    //Returns the next line including the new line character 
    //in the string.
    this.getNextLine = function() {
	let index = text.indexOf('\n');
	if (index === -1) {
	    return "";
	}
	else {
	    let currentText = text.substring(0, index + 1);
	    text = text.substring(index + 1);
	    return currentText;
	}
    }
}
module.exports.CoolLexScanner = CoolLexScanner;

